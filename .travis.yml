# Copyright (c) 2016, Linaro Limited
# All rights reserved.
# SPDX-License-Identifier:     BSD-3-Clause
#
# Please update xxxx for your coverity token and notification email if required
# pushing to github/master will run make check
# pushing to github/coverity_scan will also launch a static analysis
# See https://scan.coverity.com/travis_ci



language: c
sudo: required
env:
  global:
    # COVERITY_SCAN_TOKEN
    # ** specific to your project **
    # Note:
    # You should have a github account and travis linked travis account.
    # The secure key to be filled below is the 685 character long encrypted
    # token you can find as follow from your coverity dashboard
    # (at https://scan.coverity.com/dashboard):
    # Click on the github project (<you>/odp)
    # Click on "submit build"
    # Click on "Configure Travis CI"
    # Look at the COVERITY_SCAN_TOKEN in the env: global: section
    # of the configuration example.
    # copy the secure:<key> below
    #
    - secure: "xxxx"
    - CODECOV_TOKEN=8e1c0fd8-62ff-411e-a79f-5839f6662c11

matrix:
  include:
    - compiler: gcc-4.8
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-4.8
      env: MY_CF="-O0 -coverage" MY_LDF="--coverage" DOCOV=1
    - compiler: clang
      addons:
        apt:
          packages:
            - clang

before_install:
        - echo 1000 | sudo tee /proc/sys/vm/nr_hugepages
        - sudo mkdir -p /mnt/huge
        - sudo mount -t hugetlbfs nodev /mnt/huge

        - sudo apt-get -qq update
        - sudo apt-get install automake autoconf libtool libssl-dev graphviz mscgen doxygen
        - sudo apt-get install libpcap-dev linux-headers-`uname -r`
        - sudo pip install coverage
        - gem install asciidoctor
        - PATH=${PATH//:\.\/node_modules\/\.bin/}

#       Install cunit for the validation tests because distro version is too old and fails C99 compile
        - export CUNIT_VERSION=2.1-3
        - curl -sSOL http://sourceforge.net/projects/cunit/files/CUnit/${CUNIT_VERSION}/CUnit-${CUNIT_VERSION}.tar.bz2
        - tar -jxf *.bz2
        - cd CUnit*
        - ./bootstrap
        - ./configure --enable-debug --enable-automated --enable-basic --enable-console --enable-examples --enable-test
        - make
        - sudo make install
        - cd ..
        - export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"

#	DPDK pktio
        - TARGET=${TARGET:-"x86_64-native-linuxapp-gcc"}
        - git -c advice.detachedHead=false clone -q --depth=1 --single-branch --branch=v16.07 http://dpdk.org/git/dpdk dpdk
        - pushd dpdk
        - git log --oneline --decorate
        - make config T=${TARGET} O=${TARGET}
        - pushd ${TARGET}
        - sed -ri 's,(CONFIG_RTE_LIBRTE_PMD_PCAP=).*,\1y,' .config
        - popd
        - make install T=${TARGET} EXTRA_CFLAGS="-fPIC" > /dev/null
        - popd

#	Netmap pktio
        - sudo apt-get source linux-image-$(uname -r) > /dev/null
        - KSRC="$PWD/`find . -name kernel-parameters.txt | cut -d / -f 2 `"
        - git -c advice.detachedHead=false clone -q --depth=1 --single-branch --branch=v11.2 https://github.com/luigirizzo/netmap.git
        - pushd netmap/LINUX
        - ./configure --kernel-sources=$KSRC
        - make > /dev/null
        - sudo insmod ./netmap.ko
        - popd

script:
        - echo $TRAVIS_COMMIT_RANGE
        - ODP_PACHES=`echo $TRAVIS_COMMIT_RANGE | sed 's/\.//'`
        - git format-patch $ODP_PACHES
        - perl ./scripts/checkpatch.pl *.patch

        - ./bootstrap
        - ./configure
        - make doxygen-doc
        - make distcheck

        - ./bootstrap
        - ./configure --enable-test-cpp --enable-test-vald --enable-test-helper --enable-test-perf --enable-user-guides --enable-test-perf-proc --enable-test-example --with-dpdk-path=`pwd`/dpdk/${TARGET} --with-netmap-path=`pwd`/netmap CFLAGS="$MY_CF" CXXFLAGS="$MY_CF" LDFLAGS="$MY_LDF"
        - make -j 4
        - sudo LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" make check
        - sudo rm -rf dpdk
        - sudo rm -rf netmap
        - sudo rm -rf $KSRC

after_success:
  - if [ -n "$DOCOV" ]; then find . -type f -iname '*.[ch]' -not -path ".git/*" -execdir gcov-4.8 {} \; ; bash <(curl -s https://codecov.io/bash) -X coveragepy; fi

addons:
    coverity_scan:
        project:
            name: "$TRAVIS_REPO_SLUG"
        notification_email: xxxx
        build_command_prepend: "./bootstrap && ./configure --enable-test-cpp --enable-test-vald --enable-test-helper --enable-test-perf --enable-user-guides --enable-test-perf-proc --enable-test-example"
        build_command:   "make"
        branch_pattern: coverity_scan
