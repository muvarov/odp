# Copyright (c) 2016, Linaro Limited
# All rights reserved.
# SPDX-License-Identifier:     BSD-3-Clause
#
# Please update xxxx for your coverity token and notification email if required
# pushing to github/master will run make check
# pushing to github/coverity_scan will also launch a static analysis
# See https://scan.coverity.com/travis_ci

language: c
sudo: required
dist: trusty
group: deprecated-2017Q2
env:
  global:
    # COVERITY_SCAN_TOKEN
    # ** specific to your project **
    # Note:
    # You should have a github account and travis linked travis account.
    # The secure key to be filled below is the 685 character long encrypted
    # token you can find as follow from your coverity dashboard
    # (at https://scan.coverity.com/dashboard):
    # Click on the github project (<you>/odp)
    # Click on "submit build"
    # Click on "Configure Travis CI"
    # Look at the COVERITY_SCAN_TOKEN in the env: global: section
    # of the configuration example.
    # copy the secure:<key> below
    #
    - secure: "xxxx"
    #
    # By default Linaro CODECOV_TOKEN token is used. It's ok to use it to see
    # for individual commit validation. But you you want to track tests history
    # you need generated new one at https://codecov.io specific for your repo.
    - CODECOV_TOKEN=8e1c0fd8-62ff-411e-a79f-5839f6662c11

addons:
        apt:
                packages:
                        - gcc
                        - clang-3.8
                        - automake autoconf libtool libssl-dev graphviz mscgen
                        - libpcap-dev
                        - libconfig-dev
                        - libnuma-dev
#        coverity_scan:
#                project:
#                        name: "$TRAVIS_REPO_SLUG"
#                        notification_email: xxxx
#                        build_command_prepend: "./bootstrap && ./configure --enable-test-cpp --enable-test-vald --enable-test-helper --enable-test-perf --enable-user-guides --enable-test-perf-proc --enable-test-example"
#                        build_command:   "make"
#                        branch_pattern: coverity_scan

compiler:
        - gcc
        - clang-3.8

cache:
        ccache: true
        pip: true
        directories:
                #- dpdk
                - netmap
                - $HOME/cunit-install
                - $HOME/doxygen-install

env:
        - CONF=""
        - CONF="--disable-abi-compat"
        - CONF="--enable-schedule-sp"
        - CONF="--enable-schedule-iquery"
        - CONF="--enable-schedule-scalable"
        - CONF="--enable-dpdk-zero-copy"
        - CROSS_ARCH="arm64"
        - CROSS_ARCH="armhf" CFLAGS="-march=armv7-a"
        - CROSS_ARCH="powerpc"
        - CROSS_ARCH="i386"

before_install:

        # Install cross toolchains, etc
        # apt-get update may fail thanks to Ubuntu removing Packages/indices while not removing relevant parts of Release file
        - if [ -n "$CROSS_ARCH" ] ;
          then
                  BUILD_GNU_TYPE=`dpkg-architecture -a"$CROSS_ARCH" -qDEB_BUILD_GNU_TYPE` ;
                  CROSS_GNU_TYPE=`dpkg-architecture -a"$CROSS_ARCH" -qDEB_HOST_GNU_TYPE` ;
                  CROSS_MULTIARCH=`dpkg-architecture -a"$CROSS_ARCH" -qDEB_HOST_MULTIARCH` ;
                  CROSS="--host="$CROSS_GNU_TYPE" --build="$BUILD_GNU_TYPE"" ;
                  sudo dpkg --add-architecture "$CROSS_ARCH" ;
                  sudo -E apt-add-repository -y "deb http://ports.ubuntu.com trusty main" ;
                  sudo -E apt-add-repository -y "deb http://ports.ubuntu.com trusty-updates main" ;
                  sudo -E apt-get -y update || true ;
                  sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install build-essential ;
                  if [ "$CROSS_ARCH" = "i386" ] ;
                  then
                        sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install g++-multilib ;
                  else
                        sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install g++-"$CROSS_GNU_TYPE" ;
                  fi ;
                  sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install libc6-dev:"$CROSS_ARCH" libssl-dev:"$CROSS_ARCH" zlib1g-dev:"$CROSS_ARCH" libconfig-dev:"$CROSS_ARCH" libstdc++-4.8-dev:"$CROSS_ARCH";
                  export PKG_CONFIG_PATH=/usr/lib/${CROSS_MULTIARCH}/pkgconfig:/usr/${CROSS_MULTIARCH}/lib/pkgconfig ;
          fi
        - if [ "${CC#clang}" != "${CC}" ] ;
          then
                if [ -n "$CROSS_ARCH" ] ;
                then
                        export CC="${CC} --target=$CROSS_GNU_TYPE" ;
                fi ;
                export CXX="${CC/clang/clang++}";
          elif [ "$CROSS_ARCH" = "i386" ] ;
          then
                export CC="gcc -m32" ;
                export CXX="g++ -m32" ;
          elif [ -n "$CROSS_ARCH" ] ;
          then
                export CC="$CROSS_GNU_TYPE"-gcc ;
                export CXX="$CROSS_GNU_TYPE"-g++ ;
          fi
        - if test ! -L /usr/lib/ccache/${CC%% *} ; then sudo ln -s -t /usr/lib/ccache/ `which ${CC%% *}` ; fi
        - ccache -s
        # Install cunit for the validation tests because distro version is too old and fails C99 compile
        - sudo apt-get remove libcunit1-dev libcunit1
        - export LD_LIBRARY_PATH="$HOME/cunit-install/$CROSS_ARCH/lib:$LD_LIBRARY_PATH"
        - |
          if [ ! -f "$HOME/cunit-install/$CROSS_ARCH/lib/libcunit.a" ]; then
            export CUNIT_VERSION=2.1-3
            curl -sSOL https://github.com/Linaro/libcunit/releases/download/${CUNIT_VERSION}/CUnit-${CUNIT_VERSION}.tar.bz2
            tar -jxf *.bz2
            pushd CUnit*
            libtoolize --force --copy
            aclocal
            autoheader
            automake --add-missing --include-deps --copy
            autoconf
            ./configure --prefix=$HOME/cunit-install/$CROSS_ARCH --enable-debug --enable-automated --enable-basic --enable-console --enable-examples --enable-test $CROSS || cat config.log
            make
            sudo make install
            popd
          fi
        - export PKG_CONFIG_PATH="$HOME/cunit-install/$CROSS_ARCH/lib/pkgconfig:${PKG_CONFIG_PATH}"
        - find $HOME/cunit-install

install:
        - echo 1000 | sudo tee /proc/sys/vm/nr_hugepages
        - sudo mkdir -p /mnt/huge
        - sudo mount -t hugetlbfs nodev /mnt/huge

        - if [ -z "$CROSS_ARCH" ] ;
          then
                sudo apt-get -qq update ;
                sudo apt-get install linux-headers-`uname -r` ;
          fi
        - gem install asciidoctor

        # DPDK pktio. Note that cache must be purged if dpdk version changes.
        - DPDK_VERS="17.08"
        - |
          CACHED_DPDK_VERS=`fgrep Version dpdk/pkg/dpdk.spec | cut -d " " -f 2`
          if [ "${CACHED_DPDK_VERS}" != "${DPDK_VERS}" ]; then
            rm -rf dpdk
          fi
        - TARGET=${TARGET:-"x86_64-native-linuxapp-gcc"}
        - |
          if [ -z "$CROSS_ARCH" -a ! -f "dpdk/${TARGET}/lib/libdpdk.a" ]; then
            git -c advice.detachedHead=false clone -q --depth=1 --single-branch --branch=v${DPDK_VERS} http://dpdk.org/git/dpdk dpdk
            pushd dpdk
            git log --oneline --decorate
            make config T=${TARGET} O=${TARGET}
            pushd ${TARGET}
            sed -ri 's,(CONFIG_RTE_LIBRTE_PMD_PCAP=).*,\1y,' .config
            cat .config |grep RTE_MACHINE
            sed -ri 's,(CONFIG_RTE_MACHINE=).*,\1"snb",' .config
            popd
            make install T=${TARGET} EXTRA_CFLAGS="-fPIC"
            rm -r ./doc ./${TARGET}/app ./${TARGET}/build
            popd
          fi

#	Netmap pktio
        - |
          if [ -z "$CROSS_ARCH" ]; then
            if [ ! -f "netmap/LINUX/netmap.ko" ]; then
              git -c advice.detachedHead=false clone -q --depth=1 --single-branch --branch=v11.2 https://github.com/luigirizzo/netmap.git
              pushd netmap/LINUX
              ./configure
              make
              popd
            fi
            sudo insmod ./netmap/LINUX/netmap.ko
          fi

script:
        - if [ -z "$CROSS_ARCH" ] ; then
                EXTRA_CONF="--with-dpdk-path=`pwd`/dpdk/${TARGET} --with-netmap-path=`pwd`/netmap" ;
          fi
        - ./bootstrap
        - ./configure --prefix=$HOME/odp-install
          --enable-user-guides
          --enable-debug=full
          --enable-helper-linux
          $CROSS $EXTRA_CONF $CONF
        - make -j $(nproc)
        - mkdir /dev/shm/odp
        - if [ -z "$CROSS_ARCH" ] ; then
          sudo LD_LIBRARY_PATH="$HOME/cunit-install/$CROSS_ARCH/lib:$LD_LIBRARY_PATH" ODP_SHM_DIR=/dev/shm/odp make check ;
          fi
        - make install

        - echo "Checking linking and run from install..."
        - pushd $HOME
        - echo "Dynamic link.."
        - ${CC} ${CFLAGS} ${OLDPWD}/example/hello/odp_hello.c -o odp_hello_inst_dynamic `PKG_CONFIG_PATH=${HOME}/odp-install/lib/pkgconfig:${PKG_CONFIG_PATH} pkg-config --cflags --libs libodp-linux`
        - echo "Static link.."
        - ${CC} ${CFLAGS} ${OLDPWD}/example/hello/odp_hello.c -o odp_hello_inst_static `PKG_CONFIG_PATH=${HOME}/odp-install/lib/pkgconfig:${PKG_CONFIG_PATH} pkg-config --cflags --libs libodp-linux --static` -static
        - if [ -z "$CROSS_ARCH" ] ; then
          LD_LIBRARY_PATH="${HOME}/odp-install/lib:$LD_LIBRARY_PATH" ./odp_hello_inst_dynamic ;
          ./odp_hello_inst_static ;
          fi
        - popd
        - ccache -s

jobs:
        include:
                - stage: test
                  env: TEST=coverage
                  compiler: gcc
                  script:
                          - sudo pip install coverage
                          - ./bootstrap
                          - ./configure --prefix=$HOME/odp-install
                            --enable-user-guides
                            --with-dpdk-path=`pwd`/dpdk/${TARGET}
                            --with-netmap-path=`pwd`/netmap CFLAGS="-O0
                              -coverage"
                              CXXFLAGS="-O0 -coverage" LDFLAGS="--coverage"
                            --enable-debug=full
                            --enable-helper-linux
                          - sudo LD_LIBRARY_PATH="$HOME/cunit-install/$CROSS_ARCH/lib:$LD_LIBRARY_PATH" PATH=${PATH//:\.\/node_modules\/\.bin/} make check
                          - find . -type f -iname '*.[ch]' -not -path ".git/*" -execdir gcov {} \; ; bash <(curl -s https://codecov.io/bash) -X coveragepy
                - stage: test
                  env: TEST=distcheck
                  compiler: gcc
                  script:
                          - ./bootstrap
                          - ./configure --prefix=$HOME/odp-install
                            --enable-user-guides
                          - sudo PATH="$PATH" LD_LIBRARY_PATH="$HOME/cunit-install/$CROSS_ARCH/lib:$LD_LIBRARY_PATH" make distcheck
                - stage: test
                  env: TEST=doxygen
                  compiler: gcc
                  install:
                          - true
                  script:
                          - |
                            if [ ! -f "$HOME/doxygen-install/bin/doxygen" ]; then
                              wget https://github.com/doxygen/doxygen/archive/Release_1_8_13.tar.gz
                              tar xpvf Release_1_8_13.tar.gz
                              pushd doxygen-Release_1_8_13
                              cmake -DCMAKE_INSTALL_PREFIX=$HOME/doxygen-install .
                              make install
                              popd
                            fi

                          - export PATH=$HOME/doxygen-install/bin:$PATH
                          - ./bootstrap
                          - ./configure
                          # doxygen does not trap on warnings, check for them here.
                          - make doxygen-doc 2>&1 |tee doxygen.log
                          - |
                             fgrep -rq warning ./doxygen.log
                             if [ $? -eq 0 ]; then
                               false
                             else
                               true
                             fi
                - stage: test
                  env: TEST=checkpatch
                  compiler: gcc
                  install:
                          - true
                  script:
                          - echo ${TRAVIS_COMMIT_RANGE};
                          - ODP_PATCHES=`echo ${TRAVIS_COMMIT_RANGE} | sed 's/\.//'`;
                          - ./scripts/ci-checkpatches.sh ${ODP_PATCHES};

after_failure:
  - cat config.log
  - find . -name "*.trs" | xargs grep -l '^.test-result. FAIL' | while read trs ; do echo FAILURE detected at $trs; cat ${trs%%.trs}.log ; done
